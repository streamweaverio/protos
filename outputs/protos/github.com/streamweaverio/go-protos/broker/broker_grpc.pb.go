// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: broker.proto

package broker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamWeaverBrokerClient is the client API for StreamWeaverBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamWeaverBrokerClient interface {
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
	CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error)
	ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error)
}

type streamWeaverBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamWeaverBrokerClient(cc grpc.ClientConnInterface) StreamWeaverBrokerClient {
	return &streamWeaverBrokerClient{cc}
}

func (c *streamWeaverBrokerClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, "/broker.StreamWeaverBroker/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamWeaverBrokerClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, "/broker.StreamWeaverBroker/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamWeaverBrokerClient) CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error) {
	out := new(CreateConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/broker.StreamWeaverBroker/CreateConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamWeaverBrokerClient) ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error) {
	out := new(ListConsumerGroupsResponse)
	err := c.cc.Invoke(ctx, "/broker.StreamWeaverBroker/ListConsumerGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamWeaverBrokerServer is the server API for StreamWeaverBroker service.
// All implementations must embed UnimplementedStreamWeaverBrokerServer
// for forward compatibility
type StreamWeaverBrokerServer interface {
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error)
	ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error)
	mustEmbedUnimplementedStreamWeaverBrokerServer()
}

// UnimplementedStreamWeaverBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamWeaverBrokerServer struct {
}

func (UnimplementedStreamWeaverBrokerServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedStreamWeaverBrokerServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedStreamWeaverBrokerServer) CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerGroup not implemented")
}
func (UnimplementedStreamWeaverBrokerServer) ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerGroups not implemented")
}
func (UnimplementedStreamWeaverBrokerServer) mustEmbedUnimplementedStreamWeaverBrokerServer() {}

// UnsafeStreamWeaverBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamWeaverBrokerServer will
// result in compilation errors.
type UnsafeStreamWeaverBrokerServer interface {
	mustEmbedUnimplementedStreamWeaverBrokerServer()
}

func RegisterStreamWeaverBrokerServer(s grpc.ServiceRegistrar, srv StreamWeaverBrokerServer) {
	s.RegisterService(&StreamWeaverBroker_ServiceDesc, srv)
}

func _StreamWeaverBroker_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamWeaverBrokerServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.StreamWeaverBroker/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamWeaverBrokerServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamWeaverBroker_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamWeaverBrokerServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.StreamWeaverBroker/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamWeaverBrokerServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamWeaverBroker_CreateConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamWeaverBrokerServer).CreateConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.StreamWeaverBroker/CreateConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamWeaverBrokerServer).CreateConsumerGroup(ctx, req.(*CreateConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamWeaverBroker_ListConsumerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamWeaverBrokerServer).ListConsumerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.StreamWeaverBroker/ListConsumerGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamWeaverBrokerServer).ListConsumerGroups(ctx, req.(*ListConsumerGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamWeaverBroker_ServiceDesc is the grpc.ServiceDesc for StreamWeaverBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamWeaverBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.StreamWeaverBroker",
	HandlerType: (*StreamWeaverBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _StreamWeaverBroker_CreateStream_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _StreamWeaverBroker_GetStream_Handler,
		},
		{
			MethodName: "CreateConsumerGroup",
			Handler:    _StreamWeaverBroker_CreateConsumerGroup_Handler,
		},
		{
			MethodName: "ListConsumerGroups",
			Handler:    _StreamWeaverBroker_ListConsumerGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}
